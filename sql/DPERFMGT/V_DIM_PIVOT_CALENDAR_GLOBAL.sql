create or replace view DPERFMGT.V_DIM_PIVOT_CALENDAR_GLOBAL(
	CAL_PIVOT,
	CAL_ID,
	CAL_TYPE,
	OFFSET,
	OFFSETTYPE,
	CAL_ID_OFFSET
) COMMENT='Creation table de dimension calendaire egelfi 2025'
 as
-- Intervalle de 100 ans de mois depuis 1970
WITH GEN_MONTHS AS (
SELECT TO_CHAR(DATEADD(MONTH, SEQ4(), TO_DATE('1970-01-01')), 'YYYYMM') AS CAL_ID
FROM TABLE(GENERATOR(ROWCOUNT => 1200)))
-- Intervalles de la table de fait
, FACT_INTERVALS AS (
SELECT DISTINCT
    YM_START_END AS CAL_PIVOT,
    TO_CHAR(TO_DATE(SUBSTR(YM_START_END, 1, 8), 'YYYYMMDD'), 'YYYYMM') AS START_YYYYMM,
    TO_CHAR(TO_DATE(SUBSTR(YM_START_END, 10, 8), 'YYYYMMDD'), 'YYYYMM') AS END_YYYYMM
FROM DPERFMGT.T_FACT_PERFORMANCE_GLOBAL)
-- Réunion des PIVOT et des ID
, CAL_PIVOT_ID AS (
SELECT 
    FI.CAL_PIVOT,
    GM.CAL_ID
FROM FACT_INTERVALS FI
INNER JOIN GEN_MONTHS GM ON GM.CAL_ID BETWEEN FI.START_YYYYMM AND FI.END_YYYYMM
ORDER BY FI.CAL_PIVOT, GM.CAL_ID)
, CAL_PIVOT_ID_TYPE AS (
SELECT 
  CAL_PIVOT,
  CAL_ID,
  CASE 
    WHEN CAL_ID = MIN(CAL_ID) OVER (PARTITION BY CAL_PIVOT)
         AND CAL_ID = MAX(CAL_ID) OVER (PARTITION BY CAL_PIVOT) THEN 'START'
    WHEN CAL_ID = MIN(CAL_ID) OVER (PARTITION BY CAL_PIVOT) THEN 'START'
    WHEN CAL_ID = MAX(CAL_ID) OVER (PARTITION BY CAL_PIVOT) THEN 'END'
    ELSE 'PENDING'
  END AS CAL_TYPE
FROM CAL_PIVOT_ID
UNION ALL
-- Deuxième ligne pour les cas où START = END
SELECT 
  CAL_PIVOT,
  CAL_ID,
  'END' AS CAL_TYPE
FROM (
  SELECT 
    CAL_PIVOT,
    CAL_ID,
    MIN(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MIN_ID,
    MAX(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MAX_ID
  FROM CAL_PIVOT_ID
) AS SUB
WHERE MIN_ID = MAX_ID
UNION ALL
-- Troisième ligne pour PENDING en plus de START
SELECT 
  CAL_PIVOT,
  CAL_ID,
  'PENDING' AS CAL_TYPE
FROM (
  SELECT 
    CAL_PIVOT,
    CAL_ID,
    MIN(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MIN_ID,
    MAX(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MAX_ID
  FROM CAL_PIVOT_ID
) AS SUB
WHERE CAL_ID = MIN_ID
UNION ALL
-- Quatrième ligne pour PENDING en plus de START si 1 mois et dernier jour du mois.
SELECT 
  CAL_PIVOT,
  CAL_ID,
  'PENDING' AS CAL_TYPE
FROM (
  SELECT 
    CAL_PIVOT,
    CAL_ID,
    MIN(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MIN_ID,
    MAX(CAL_ID) OVER (PARTITION BY CAL_PIVOT) AS MAX_ID,
    TO_DATE(SPLIT_PART(CAL_PIVOT, '-', 2), 'YYYYMMDD') = LAST_DAY(TO_DATE(SPLIT_PART(CAL_PIVOT, '-', 2), 'YYYYMMDD')) AS LAST_DAY_OF_MONTH,
    (CAST(SUBSTRING(MAX_ID, 1, 4) AS INT) - CAST(SUBSTRING(MIN_ID, 1, 4) AS INT)) * 12 + (CAST(SUBSTRING(MAX_ID, 5, 2) AS INT) - CAST(SUBSTRING(MIN_ID, 5, 2) AS INT)) + 1 AS DIFF
  FROM CAL_PIVOT_ID
) AS SUB
WHERE CAL_ID = MAX_ID AND LAST_DAY_OF_MONTH AND DIFF >= 2
ORDER BY CAL_PIVOT, CAL_ID, CAL_TYPE)
-- DISTINCT CAL_ID
, DISTINCT_CAL_ID AS (
SELECT DISTINCT CAL_ID
FROM CAL_PIVOT_ID_TYPE
ORDER BY CAL_ID DESC)
-- DISTINCT CAL_ID LIKE '202%'
, DISTINCT_CAL_ID_202 AS (
SELECT DISTINCT CAL_ID
FROM CAL_PIVOT_ID_TYPE
WHERE CAL_ID LIKE '202%'
ORDER BY CAL_ID DESC)
-- Calcul d'un champ OFFSET
, LT_CAL_ID_OFFSET AS (
SELECT CAL_ID, 0 AS OFFSET, 'M' AS OFFSETTYPE, CAL_ID AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID
UNION ALL
SELECT CAL_ID, -1 AS OFFSET, 'M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -1, TO_DATE(CAL_ID || '01','YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -2 AS OFFSET, 'M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -2, TO_DATE(CAL_ID || '01','YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -3 AS OFFSET, 'M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -3, TO_DATE(CAL_ID || '01','YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, 0 AS OFFSET, 'SPOT' AS OFFSETTYPE, CAL_ID AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID
UNION ALL
SELECT CAL_ID, 0 AS OFFSET, 'YTD' AS OFFSETTYPE, LEFT(CAL_ID, 4) || '01' AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -1 AS OFFSET, 'YTD' AS OFFSETTYPE, (LEFT(CAL_ID, 4) -1)::INTEGER || '12' AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -2 AS OFFSET, 'YTD' AS OFFSETTYPE, (LEFT(CAL_ID, 4) -1)::INTEGER || '11' AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -3 AS OFFSET, 'YTD' AS OFFSETTYPE, (LEFT(CAL_ID, 4) -1)::INTEGER || '10' AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, 0 AS OFFSET, 'R12M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -12, TO_DATE(CAL_ID || '01', 'YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -1 AS OFFSET, 'R12M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -13, TO_DATE(CAL_ID || '01', 'YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -2 AS OFFSET, 'R12M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -14, TO_DATE(CAL_ID || '01', 'YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202
UNION ALL
SELECT CAL_ID, -3 AS OFFSET, 'R12M' AS OFFSETTYPE, TO_CHAR((DATEADD(MONTH, -15, TO_DATE(CAL_ID || '01', 'YYYYMMDD'))),'YYYYMM') AS CAL_ID_OFFSET FROM DISTINCT_CAL_ID_202)
SELECT P.CAL_PIVOT,
	P.CAL_ID,
	P.CAL_TYPE,
    A.OFFSET,
    A.OFFSETTYPE,
    A.CAL_ID_OFFSET
FROM LT_CAL_ID_OFFSET A 
INNER JOIN CAL_PIVOT_ID_TYPE P ON A.CAL_ID = P.CAL_ID;